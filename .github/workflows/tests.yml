name: Run Tests with Coverage

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test-server:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: orders_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U user -d orders_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics check_running"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Wait for services to be ready
        run: |
          echo "Waiting for RabbitMQ and Postgres to be ready..."
          for i in {1..30}; do
            nc -z localhost 5672 && echo "RabbitMQ is up!" && break
            echo "Waiting for RabbitMQ..."
            sleep 2
          done
          sleep 5  # Дополнительное ожидание

      - name: Run server tests with coverage
        run: |
          pytest --cov=server --cov-report=term-missing tests/test_server.py

      - name: Check server coverage
        run: |
          coverage_percentage=$(pytest --cov=server --cov-report=term tests/test_server.py | grep 'TOTAL' | awk '{print $4}' | tr -d '%')
          if (( $(echo "$coverage_percentage < 100" | bc -l) )); then
            echo "Server test coverage is below 100% ($coverage_percentage%). Failing the build."
            exit 1
          fi

  test-consumer:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: orders_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U user -d orders_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics check_running"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Wait for services to be ready
        run: |
          echo "Waiting for RabbitMQ and Postgres to be ready..."
          for i in {1..30}; do
            nc -z localhost 5672 && echo "RabbitMQ is up!" && break
            echo "Waiting for RabbitMQ..."
            sleep 2
          done
          sleep 5  # Дополнительное ожидание

      - name: Run consumer tests with coverage
        run: |
          pytest --cov=consumer --cov-report=term-missing tests/test_consumer.py

      - name: Check consumer coverage
        run: |
          coverage_percentage=$(pytest --cov=consumer --cov-report=term tests/test_consumer.py | grep 'TOTAL' | awk '{print $4}' | tr -d '%')
          if (( $(echo "$coverage_percentage < 100" | bc -l) )); then
            echo "Consumer test coverage is below 100% ($coverage_percentage%). Failing the build."
            exit 1
          fi

